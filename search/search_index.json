{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"\u4e3b\u9875"},{"location":"getting-started/","text":"","title":"\u5165\u95e8"},{"location":"algo/array/","text":"","title":"\u6570\u7ec4"},{"location":"algo/introduction/","text":"","title":"\u7b97\u6cd5\u57fa\u7840\u7b80\u4ecb"},{"location":"coding/cpp/","text":"","title":"C++"},{"location":"coding/csharp/","text":"","title":"C#"},{"location":"solutions/","text":"\u73a9\u8f6c\u529b\u6263 | LeetCode\u539f\u521b\u9898\u89e3 \u00b6 \u4ed3\u5e93 leetcode-ac \u63d0\u4f9bLeetCode\u4e2d\u6587\u9898\u5927\u5168\u3001LeetCode \u6e05\u6670\u6613\u61c2\u7684\u4ee3\u7801 (\u542b\u591a\u79cd\u8bed\u8a00: C++/Java/C#/Python/Go) \u53ca\u8be6\u7ec6\u9898\u89e3, \u5e76\u5c06 \u6301\u7eed\u4e0d\u65ad\u66f4\u65b0 , \u52a9\u4f60\u65e9\u65e5\u65a9\u83b7\u5927\u5382Offer! \u5982\u679c\u60f3\u7b2c\u4e00\u65f6\u95f4\u6536\u5230\u6700\u65b0\u66f4\u65b0, \u8fd8\u8bf7\u70b9\u4e2astar/fork \u6216 watch, \u5982\u679c\u6709\u4e0d\u9519\u7684\u89e3\u6cd5\u4e5f\u6b22\u8fce\u63d0PR~ \u5982\u679c\u5728\u672c\u9879\u76ee\u4e2d\u53d1\u73b0\u95ee\u9898, \u6b22\u8fce\u7ed9\u6211\u63d0issue\u5594, \u770b\u5230\u540e\u4f1a\u7acb\u523b\u56de\u590d\u7684~ \ud83d\udce2\u6211\u4eec\u7684slogan \u00b6 \u672c\u4ed3\u5e93 leetcode-ac \u7684\u53e3\u53f7\u662f: AC\u4e00\u65f6\u723d, \u4e00\u76f4AC\u4e00\u76f4\u723d\u3002 \u6b22\u8fce\u5173\u6ce8\u672c\u9879\u76ee\u7684\u540c\u540d\u516c\u4f17\u53f7 \u300c\u73a9\u8f6c\u529b\u6263\u300d \uff0c\u6781\u5ba2\u5b66\u957f\u5e26\u4f60 \u8f7b\u677e\u5237 LeetCode \uff01 ps : \u6240\u6709\u9898\u89e3\u7684\u4ee3\u7801\u5c06\u7b2c\u4e00\u65f6\u95f4\u5728\u672c\u4ed3\u5e93\u66f4\u65b0, \u800c\u6240\u6709\u9898\u89e3\u5c06\u7b2c\u4e00\u65f6\u95f4\u5728\u516c\u4f17\u53f7 \u300c\u73a9\u8f6c\u529b\u6263\u300d \u66f4\u65b0!","title":"leetcode\u9898\u89e3"},{"location":"solutions/#leetcode","text":"\u4ed3\u5e93 leetcode-ac \u63d0\u4f9bLeetCode\u4e2d\u6587\u9898\u5927\u5168\u3001LeetCode \u6e05\u6670\u6613\u61c2\u7684\u4ee3\u7801 (\u542b\u591a\u79cd\u8bed\u8a00: C++/Java/C#/Python/Go) \u53ca\u8be6\u7ec6\u9898\u89e3, \u5e76\u5c06 \u6301\u7eed\u4e0d\u65ad\u66f4\u65b0 , \u52a9\u4f60\u65e9\u65e5\u65a9\u83b7\u5927\u5382Offer! \u5982\u679c\u60f3\u7b2c\u4e00\u65f6\u95f4\u6536\u5230\u6700\u65b0\u66f4\u65b0, \u8fd8\u8bf7\u70b9\u4e2astar/fork \u6216 watch, \u5982\u679c\u6709\u4e0d\u9519\u7684\u89e3\u6cd5\u4e5f\u6b22\u8fce\u63d0PR~ \u5982\u679c\u5728\u672c\u9879\u76ee\u4e2d\u53d1\u73b0\u95ee\u9898, \u6b22\u8fce\u7ed9\u6211\u63d0issue\u5594, \u770b\u5230\u540e\u4f1a\u7acb\u523b\u56de\u590d\u7684~","title":"\u73a9\u8f6c\u529b\u6263 | LeetCode\u539f\u521b\u9898\u89e3"},{"location":"solutions/#slogan","text":"\u672c\u4ed3\u5e93 leetcode-ac \u7684\u53e3\u53f7\u662f: AC\u4e00\u65f6\u723d, \u4e00\u76f4AC\u4e00\u76f4\u723d\u3002 \u6b22\u8fce\u5173\u6ce8\u672c\u9879\u76ee\u7684\u540c\u540d\u516c\u4f17\u53f7 \u300c\u73a9\u8f6c\u529b\u6263\u300d \uff0c\u6781\u5ba2\u5b66\u957f\u5e26\u4f60 \u8f7b\u677e\u5237 LeetCode \uff01 ps : \u6240\u6709\u9898\u89e3\u7684\u4ee3\u7801\u5c06\u7b2c\u4e00\u65f6\u95f4\u5728\u672c\u4ed3\u5e93\u66f4\u65b0, \u800c\u6240\u6709\u9898\u89e3\u5c06\u7b2c\u4e00\u65f6\u95f4\u5728\u516c\u4f17\u53f7 \u300c\u73a9\u8f6c\u529b\u6263\u300d \u66f4\u65b0!","title":"\ud83d\udce2\u6211\u4eec\u7684slogan"},{"location":"solutions/leetcode1%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%5B%E7%AE%80%E5%8D%95%5D/","text":"1. \u4e24\u6570\u4e4b\u548c \u00b6 \u25cf \u96be\u5ea6: \u7b80\u5355 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570\u76ee\u6807\u503c target \uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa \u548c\u4e3a\u76ee\u6807\u503c target \u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u5b83\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u5728\u7b54\u6848\u91cc\u4e0d\u80fd\u91cd\u590d\u51fa\u73b0\u3002 \u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1anums = [2,7,11,15], target = 9 \u8f93\u51fa\uff1a[0,1] \u89e3\u91ca\uff1a\u56e0\u4e3a nums[0] + nums[1] == 9 \uff0c\u8fd4\u56de [0, 1] \u3002 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1anums = [3,2,4], target = 6 \u8f93\u51fa\uff1a[1,2] \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1anums = [3,3], target = 6 \u8f93\u51fa\uff1a[0,1] \u63d0\u793a\uff1a 2 <= nums.length <= 10^4 -10^9 <= nums[i] <= 10^9 -10^9 <= target <= 10^9 \u53ea\u4f1a\u5b58\u5728\u4e00\u4e2a\u6709\u6548\u7b54\u6848 \u8fdb\u9636\uff1a \u4f60\u53ef\u4ee5\u60f3\u51fa\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u5c0f\u4e8e O(n 2 ) \u7684\u7b97\u6cd5\u5417\uff1f \u82f1\u6587\u9898\u76ee: 2 sum (Two sum) \u00b6 Given an array of integers nums and an integer target , return indices of the two numbers such that they add up to target . You may assume that each input would have exactly one solution , and you may not use the _same element twice. You can return the answer in any order. Example 1: Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explaination: Because nums[0] + nums[1] == 9, we return [0, 1]. Example 2: Input: nums = [3,2,4], target = 6 Output: [1,2] Example 3: Input: nums = [3,3], target = 6 Output: [0,1] Constraints: 2 <= nums.length <= 103 -109 <= nums[i] <= 109 -109 <= target <= 109 Only one valid answer exists. \u5206\u6790: \u00b6 \u65b9\u6cd51 : \u66b4\u529b\u6cd5\uff0c\u590d\u6742\u5ea6O(n^2)\uff0c\u4f1aTLE(\u8d85\u65f6); \u65b9\u6cd52 : hashmap\u67e5\u8868\uff0c\u5728\u8868\u4e2d\u627e target - \u5f53\u524d\u5faa\u73af\u53d8\u91cfi\u5bf9\u5e94\u7684\u90a3\u4e2a\u6570\u3002\u7528\u4e00\u4e2a\u54c8\u5e0c\u8868(C++\u4e2d\u7528unordered_map, C#\u4e2d\u7528dictionary, Python\u4e2d\u7528dict\uff0cJava\u4e2d\u53ef\u4ee5\u76f4\u63a5\u7528HashMap)\uff0c\u5b58\u50a8\u6bcf\u4e2a\u6570\u5bf9\u5e94\u7684\u4e0b\u6807\uff0c\u590d\u6742\u5ea6O(n); \u65b9\u6cd53 : \u5feb\u6392 + \u53cc\u6307\u9488 \u200b \u65b9\u6cd52 AC\u4ee3\u7801: \u00b6 \u200b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public : vector < int > twoSum ( vector < int > & nums , int target ) { unordered_map < int , int > dict ; vector < int > result ; for ( int i = 0 ; i < nums . size (); i ++ ) { dict [ nums [ i ]] = i ; // \u987a\u5e8f\u7684map\u6620\u5c04: value->index } for ( int i = 0 ; i < nums . size (); i ++ ) { int query = target - nums [ i ]; if ( dict . find ( query ) != dict . end () && dict [ query ] > i ) // dict[query] > i\u662f\u4e3a\u4e86\u9632\u6b62\u91cd\u590d\u8ba1\u7b97 { result . push_back ( i ); result . push_back ( dict [ query ]); break ; } } return result ; } }; \u65b9\u6cd52\u7684\u53e6\u4e00\u79cd\u5199\u6cd5: \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public : vector < int > twoSum ( vector < int > & nums , int target ) { unordered_map < int , int > dict ; vector < int > res ( 2 , -1 ), emptyVect ; for ( int i = 0 ; i < nums . size (); i ++ ) { int query = target - nums [ i ]; if ( dict . find ( query ) == dict . end ()) dict [ nums [ i ]] = i ; // \u9006\u5e8f\u7684map\u6620\u5c04: value->index else { res [ 1 ] = i ; res [ 0 ] = dict [ query ]; return res ; } } return emptyVect ; } }; \u200b \u65b9\u6cd53 AC\u4ee3\u7801: \u00b6 \u5b9a\u4e49\u4e00\u4e2astruct, \u5b58\u50a8 index \u548c value \u4f7f\u7528\u4e24\u4e2a\u6307\u9488, l \u548c r, l++, r-- left\u81ea\u589e, right \u81ea\u51cf \u6ce8\u610f : \u5982\u679c\u8981\u5728\u4e00\u4e2astruct\u4e0a\u8c03\u7528STL\u4e2d\u7684sort\u65b9\u6cd5\uff0c\u9700\u8981\u5148\u4e3a\u5176\u5b9a\u4e49\u597d compare \u51fd\u6570\u3002 \u200b \u5177\u4f53\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 typedef struct node { int index ; int value ; node (){}; node ( int i , int v ) : index ( i ), value ( v ){} } Node ; bool compare ( const Node & a , const Node & b ){ return a . value < b . value ; } class Solution { public : vector < int > twoSum ( vector < int > & nums , int target ) { int len = nums . size (); assert ( len >= 2 ); vector < int > res ( 2 , 0 ); // \u521d\u59cb\u5316\uff1ares\u5305\u542b2\u4e2a\u503c\u4e3a0\u7684\u5143\u7d20 vector < Node > nums2 ( len ); for ( int i = 0 ; i < len ; i ++ ){ nums2 [ i ] = Node ( i + 1 , nums [ i ]); } sort ( nums2 . begin (), nums2 . end (), compare ); // \u5728\u5b9a\u4e49\u7684struct\u4e0a\u8c03\u7528\u5feb\u6392\uff0cT(n)=O(n*log(n)) int l = 0 ; int r = len - 1 ; while ( l < r ){ int sum = nums2 [ l ]. value + nums2 [ r ]. value ; if ( sum == target ){ res [ 0 ] = min ( nums2 [ l ]. index , nums2 [ r ]. index ) -1 ; // \u6ce8\u610f\uff0c\u8fd9\u91cc\u9700\u8981\u51cf\u53bb1 res [ 1 ] = max ( nums2 [ l ]. index , nums2 [ r ]. index ) -1 ; break ; } else if ( sum < target ){ l ++ ; } else { r -- ; } } return res ; // \u7528\u4e24\u4e2a\u6307\u9488\u6765\u626b } };","title":"leetcode1 \u4e24\u6570\u4e4b\u548c - \u7b80\u5355"},{"location":"solutions/leetcode1%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%5B%E7%AE%80%E5%8D%95%5D/#1","text":"\u25cf \u96be\u5ea6: \u7b80\u5355 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570\u76ee\u6807\u503c target \uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa \u548c\u4e3a\u76ee\u6807\u503c target \u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u5b83\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u5728\u7b54\u6848\u91cc\u4e0d\u80fd\u91cd\u590d\u51fa\u73b0\u3002 \u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1anums = [2,7,11,15], target = 9 \u8f93\u51fa\uff1a[0,1] \u89e3\u91ca\uff1a\u56e0\u4e3a nums[0] + nums[1] == 9 \uff0c\u8fd4\u56de [0, 1] \u3002 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1anums = [3,2,4], target = 6 \u8f93\u51fa\uff1a[1,2] \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1anums = [3,3], target = 6 \u8f93\u51fa\uff1a[0,1] \u63d0\u793a\uff1a 2 <= nums.length <= 10^4 -10^9 <= nums[i] <= 10^9 -10^9 <= target <= 10^9 \u53ea\u4f1a\u5b58\u5728\u4e00\u4e2a\u6709\u6548\u7b54\u6848 \u8fdb\u9636\uff1a \u4f60\u53ef\u4ee5\u60f3\u51fa\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u5c0f\u4e8e O(n 2 ) \u7684\u7b97\u6cd5\u5417\uff1f","title":"1. \u4e24\u6570\u4e4b\u548c"},{"location":"solutions/leetcode1%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%5B%E7%AE%80%E5%8D%95%5D/#2-sum-two-sum","text":"Given an array of integers nums and an integer target , return indices of the two numbers such that they add up to target . You may assume that each input would have exactly one solution , and you may not use the _same element twice. You can return the answer in any order. Example 1: Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explaination: Because nums[0] + nums[1] == 9, we return [0, 1]. Example 2: Input: nums = [3,2,4], target = 6 Output: [1,2] Example 3: Input: nums = [3,3], target = 6 Output: [0,1] Constraints: 2 <= nums.length <= 103 -109 <= nums[i] <= 109 -109 <= target <= 109 Only one valid answer exists.","title":"\u82f1\u6587\u9898\u76ee: 2 sum (Two sum)"},{"location":"solutions/leetcode1%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%5B%E7%AE%80%E5%8D%95%5D/#_1","text":"\u65b9\u6cd51 : \u66b4\u529b\u6cd5\uff0c\u590d\u6742\u5ea6O(n^2)\uff0c\u4f1aTLE(\u8d85\u65f6); \u65b9\u6cd52 : hashmap\u67e5\u8868\uff0c\u5728\u8868\u4e2d\u627e target - \u5f53\u524d\u5faa\u73af\u53d8\u91cfi\u5bf9\u5e94\u7684\u90a3\u4e2a\u6570\u3002\u7528\u4e00\u4e2a\u54c8\u5e0c\u8868(C++\u4e2d\u7528unordered_map, C#\u4e2d\u7528dictionary, Python\u4e2d\u7528dict\uff0cJava\u4e2d\u53ef\u4ee5\u76f4\u63a5\u7528HashMap)\uff0c\u5b58\u50a8\u6bcf\u4e2a\u6570\u5bf9\u5e94\u7684\u4e0b\u6807\uff0c\u590d\u6742\u5ea6O(n); \u65b9\u6cd53 : \u5feb\u6392 + \u53cc\u6307\u9488 \u200b","title":"\u5206\u6790:"},{"location":"solutions/leetcode1%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%5B%E7%AE%80%E5%8D%95%5D/#2-ac","text":"\u200b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public : vector < int > twoSum ( vector < int > & nums , int target ) { unordered_map < int , int > dict ; vector < int > result ; for ( int i = 0 ; i < nums . size (); i ++ ) { dict [ nums [ i ]] = i ; // \u987a\u5e8f\u7684map\u6620\u5c04: value->index } for ( int i = 0 ; i < nums . size (); i ++ ) { int query = target - nums [ i ]; if ( dict . find ( query ) != dict . end () && dict [ query ] > i ) // dict[query] > i\u662f\u4e3a\u4e86\u9632\u6b62\u91cd\u590d\u8ba1\u7b97 { result . push_back ( i ); result . push_back ( dict [ query ]); break ; } } return result ; } };","title":"\u65b9\u6cd52 AC\u4ee3\u7801:"},{"location":"solutions/leetcode1%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%5B%E7%AE%80%E5%8D%95%5D/#2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public : vector < int > twoSum ( vector < int > & nums , int target ) { unordered_map < int , int > dict ; vector < int > res ( 2 , -1 ), emptyVect ; for ( int i = 0 ; i < nums . size (); i ++ ) { int query = target - nums [ i ]; if ( dict . find ( query ) == dict . end ()) dict [ nums [ i ]] = i ; // \u9006\u5e8f\u7684map\u6620\u5c04: value->index else { res [ 1 ] = i ; res [ 0 ] = dict [ query ]; return res ; } } return emptyVect ; } }; \u200b","title":"\u65b9\u6cd52\u7684\u53e6\u4e00\u79cd\u5199\u6cd5:"},{"location":"solutions/leetcode1%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%5B%E7%AE%80%E5%8D%95%5D/#3-ac","text":"\u5b9a\u4e49\u4e00\u4e2astruct, \u5b58\u50a8 index \u548c value \u4f7f\u7528\u4e24\u4e2a\u6307\u9488, l \u548c r, l++, r-- left\u81ea\u589e, right \u81ea\u51cf \u6ce8\u610f : \u5982\u679c\u8981\u5728\u4e00\u4e2astruct\u4e0a\u8c03\u7528STL\u4e2d\u7684sort\u65b9\u6cd5\uff0c\u9700\u8981\u5148\u4e3a\u5176\u5b9a\u4e49\u597d compare \u51fd\u6570\u3002 \u200b \u5177\u4f53\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 typedef struct node { int index ; int value ; node (){}; node ( int i , int v ) : index ( i ), value ( v ){} } Node ; bool compare ( const Node & a , const Node & b ){ return a . value < b . value ; } class Solution { public : vector < int > twoSum ( vector < int > & nums , int target ) { int len = nums . size (); assert ( len >= 2 ); vector < int > res ( 2 , 0 ); // \u521d\u59cb\u5316\uff1ares\u5305\u542b2\u4e2a\u503c\u4e3a0\u7684\u5143\u7d20 vector < Node > nums2 ( len ); for ( int i = 0 ; i < len ; i ++ ){ nums2 [ i ] = Node ( i + 1 , nums [ i ]); } sort ( nums2 . begin (), nums2 . end (), compare ); // \u5728\u5b9a\u4e49\u7684struct\u4e0a\u8c03\u7528\u5feb\u6392\uff0cT(n)=O(n*log(n)) int l = 0 ; int r = len - 1 ; while ( l < r ){ int sum = nums2 [ l ]. value + nums2 [ r ]. value ; if ( sum == target ){ res [ 0 ] = min ( nums2 [ l ]. index , nums2 [ r ]. index ) -1 ; // \u6ce8\u610f\uff0c\u8fd9\u91cc\u9700\u8981\u51cf\u53bb1 res [ 1 ] = max ( nums2 [ l ]. index , nums2 [ r ]. index ) -1 ; break ; } else if ( sum < target ){ l ++ ; } else { r -- ; } } return res ; // \u7528\u4e24\u4e2a\u6307\u9488\u6765\u626b } };","title":"\u65b9\u6cd53 AC\u4ee3\u7801:"},{"location":"solutions/leetcode36%20%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC%5B%E4%B8%AD%E7%AD%89%5D/","text":"36. \u6709\u6548\u7684\u6570\u72ec \u00b6 \u82f1\u6587\u9898\u76ee: Valid sudoku \u00b6 \u25cf \u96be\u5ea6: \u4e2d\u7b49 \u8bf7\u4f60\u5224\u65ad\u4e00\u4e2a 9x9 \u7684\u6570\u72ec\u662f\u5426\u6709\u6548\u3002\u53ea\u9700\u8981 \u6839\u636e\u4ee5\u4e0b\u89c4\u5219 \uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684 3x3 \u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002\uff08\u8bf7\u53c2\u8003\u793a\u4f8b\u56fe\uff09 \u6570\u72ec\u90e8\u5206\u7a7a\u683c\u5185\u5df2\u586b\u5165\u4e86\u6570\u5b57\uff0c\u7a7a\u767d\u683c\u7528 '.' \u8868\u793a\u3002 \u6ce8\u610f\uff1a \u4e00\u4e2a\u6709\u6548\u7684\u6570\u72ec\uff08\u90e8\u5206\u5df2\u88ab\u586b\u5145\uff09\u4e0d\u4e00\u5b9a\u662f\u53ef\u89e3\u7684\u3002 \u53ea\u9700\u8981\u6839\u636e\u4ee5\u4e0a\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 8 9 10 11 \u8f93\u5165\uff1aboard = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"] ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"] ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"] ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"] ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"] ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"] ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"] ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"] ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]] \u8f93\u51fa\uff1atrue \u793a\u4f8b 2\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 \u8f93\u5165\uff1aboard = [[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"] ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"] ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"] ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"] ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"] ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"] ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"] ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"] ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]] \u8f93\u51fa\uff1afalse \u89e3\u91ca\uff1a\u9664\u4e86\u7b2c\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u4ece 5 \u6539\u4e3a 8 \u4ee5\u5916\uff0c\u7a7a\u683c\u5185\u5176\u4ed6\u6570\u5b57\u5747\u4e0e \u793a\u4f8b1 \u76f8\u540c\u3002 \u4f46\u7531\u4e8e\u4f4d\u4e8e\u5de6\u4e0a\u89d2\u7684 3x3 \u5bab\u5185\u6709\u4e24\u4e2a 8 \u5b58\u5728, \u56e0\u6b64\u8fd9\u4e2a\u6570\u72ec\u662f\u65e0\u6548\u7684\u3002 \u63d0\u793a\uff1a board.length == 9 board[i].length == 9 board[i][j] \u662f\u4e00\u4f4d\u6570\u5b57\u6216\u8005 '.' \u5206\u6790 \u00b6 \u65b9\u6cd51\u3001\u86ee\u529b\u76f4\u63a5\u6cd5 \u00b6 \u4f7f\u7528set\uff0c \u5bf9\u4e8e\u884c\u904d\u5386: \u6bcf\u4e00\u884c\u4e2d, isValid: unique\u7684\u6570\u5b57\u6570\u91cf+'.'\u7684\u6570\u91cf = 9, \u5bf9\u4e8e\u5217\u904d\u5386\uff1a\u6bcf\u4e00\u5217\u4e2d, isValid: unique\u7684\u6570\u5b57\u6570\u91cf+'.'\u7684\u6570\u91cf = 9, \u5bf9\u4e8ebox\u904d\u5386\uff1a\u6bcf\u4e2a3\u884c3\u5217\u4e5d\u5bab\u683c\u4e2d\uff0cisValid: unique\u7684\u6570\u5b57\u6570\u91cf+'.'\u7684\u6570\u91cf = 9\u3002 \u5df2AC\u4ee3\u7801: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 class Solution { public : bool isValidSudoku ( vector < vector < char >> & board ) { bool isValid = true ; // \u904d\u5386\u884c for ( int i = 0 ; i < 9 ; i ++ ) { set < char > st ; vector < char > rowVec = board [ i ]; int dotCount = 0 ; for ( int k = 0 ; k < 9 ; k ++ ) { if ( rowVec [ k ] == '.' ) { dotCount ++ ; } else st . insert ( rowVec [ k ]); } int uniqueCharCount = st . size (); if ( uniqueCharCount + dotCount != 9 ) { isValid = false ; } } // \u904d\u5386\u5217 for ( int i = 0 ; i < 9 ; i ++ ) { set < char > st ; int dotCount = 0 ; for ( int k = 0 ; k < 9 ; k ++ ) { if ( board [ k ][ i ] == '.' ) { dotCount ++ ; } else st . insert ( board [ k ][ i ]); } int uniqueCharCount = st . size (); if ( uniqueCharCount + dotCount != 9 ) { isValid = false ; } } // \u904d\u5386\u5c0fgrid: \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684 3x3 \u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 for ( int si = 0 ; si <= 6 ; si += 3 ) for ( int sj = 0 ; sj <= 6 ; sj += 3 ) { set < char > st ; int dotCount = 0 ; for ( int i = si ; i < si + 3 ; i ++ ) { for ( int j = sj ; j < sj + 3 ; j ++ ) { if ( board [ i ][ j ] == '.' ) dotCount += 1 ; else st . insert ( board [ i ][ j ]); } } if ( st . size () + dotCount != 9 ) isValid = false ; } return isValid ; } }; \u8ddf\u56fd\u5916\u7684\u5c0f\u4f19\u4f34\u60f3\u5230\u4e00\u5757\u53bb\u4e86\u3002 https://leetcode.com/problems/valid-sudoku/discuss/869625/easy-C%2B%2B-with-set \u65b9\u6cd52\uff1aset\u63d2\u5165\u65b9\u6cd5 - \u6539\u8fdb \u00b6 \u5750\u6807\u4e2d\u4efb\u610f\u4e00\u70b9(i,j)\uff0c\u53ef\u4ee5map\u5230\u5bf9\u5e94\u7684\u7684\u7b2c\u51e0\u884c\u7b2c\u51e0\u5217\u7684\u65b9\u5757(box)\u4e2d\uff0cbox\u7684\u5750\u6807\u4e3a(i/3, j/3)\u3002 \u4e8e\u662f\u628a\u4e00\u4e2a\u5c0f\u7684\u4e5d\u5bab\u683c\u4e2d\u7684\u6570\u5168\u538b\u7f29\u5230\u4e00\u4e2abox\u4e2d\uff0c\u6bd4\u5982\uff1a \u4ee5\u6700\u4e2d\u95f4\u90a3\u4e2a\u4e5d\u5bab\u683c\u4e3a\u4f8b\uff0c\u4f7f\u7528int\u578b\u7684/3\u53ef\u4ee5\u5f97\u5230: \u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u503c\u4e0d\u4e3a'.'\u7684\u5b57\u7b26\uff0c\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c: 1.\u628a\u6240\u5728row\u7684\u4fe1\u606f\u63d2\u5165\u5230\u5927\u4e5d\u5bab\u683c\u4e2d; 2.\u628a\u6240\u5728column\u7684\u4fe1\u606f\u63d2\u5165\u5230\u5927\u4e5d\u5bab\u683c\u4e2d; 3.\u628a\u6240\u5728\u7684\u5c0f\u65b9\u5757(box)\u7684\u4fe1\u606f\u63d2\u5165\u5230\u5927\u4e5d\u5bab\u683c\u4e2d\u3002 \u63d2\u5165\u5982\u679c\u5931\u8d25\u8bf4\u660e\u51fa\u73b0\u4e86\u91cd\u590d\u3002 \u5df2AC\u7684C++\u4ee3\u7801: \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { public : bool isValidSudoku ( vector < vector < char >>& board ) { set < string > st ; for ( int i = 0 ; i < 9 ; i ++ ) { for ( int j = 0 ; j < 9 ; j ++ ) { char ch = board [ i ][ j ]; // \u4f7f\u7528i / 3 + \",\" + j / 3 \u5f97\u5230\u5bf9\u5e94\u7b2c\u51e0\u884c\u7b2c\u51e0\u5217\u7684\u65b9\u5757(box) if ( ch != '.' ){ string val ; val . push_back ( ch ); /* \u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u503c\u4e0d\u4e3a'.'\u7684\u5b57\u7b26 1.\u628a\u6240\u5728row\u7684\u4fe1\u606f\u63d2\u5165\u5230\u5927\u4e5d\u5bab\u683c\u4e2d; 2.\u628a\u6240\u5728column\u7684\u4fe1\u606f\u63d2\u5165\u5230\u5927\u4e5d\u5bab\u683c\u4e2d; 3.\u628a\u6240\u5728\u7684\u5c0f\u65b9\u5757(box)\u7684\u4fe1\u606f\u63d2\u5165\u5230\u5927\u4e5d\u5bab\u683c\u4e2d\u3002 \u63d2\u5165\u5982\u679c\u5931\u8d25\u8bf4\u660e\u51fa\u73b0\u4e86\u91cd\u590d\u3002 */ if ( ! st . insert ( val + \" in row \" + to_string ( i )). second || ! st . insert ( val + \" in column \" + to_string ( j )). second || ! st . insert ( val + \" in box \" + to_string ( i / 3 ) + \",\" + to_string ( j / 3 )). second ) return false ; /* set\u63d2\u5165\u5931\u8d25\u65f6\uff0c\u8868\u793a\u51fa\u73b0\u4e86\u91cd\u590d */ } } } return true ; } }; Java\u7684HashSet\u6709\u540c\u6837\u7684\u5199\u6cd5\uff0cJava\u4e2d\u63d2\u5165\u5931\u8d25\uff0c\u4f1a\u51fa\u73b0 set.Add() == false \u3002 \u65b9\u6cd53\uff1a\u4f7f\u7528\u4f4d\u64cd\u4f5c \u00b6 \u6b64\u9898\uff0c\u4f7f\u7528\u4f4d\u64cd\u4f5c\uff0c\u662f\u51e0\u79cd\u89e3\u6cd5\u4e2d\u901f\u5ea6\u6700\u5feb\u7684\u7b97\u6cd5\u4e86\u3002 \u5177\u4f53\u505a\u6cd5\u662f\uff1a \u5c06\u5927\u6570\u72ec\u68cb\u76d8\u5206\u62109\u4e2a\u5c0f\u68cb\u76d8\uff0c\u7f16\u53f70~8\u3002 \u7a97\u53e3\u4e2d\u7684\u6bcf\u4e2a\u5c0f\u65b9\u683c\u82e5\u6709\u6570\u5b57\uff0c\u5fc5\u4e3a 1 ~ 9 (\u8bb0\u4f5ck)\uff0c\u8be5\u65b9\u6cd5\u9002\u7528\u4e8e \u904d\u5386\u884c/\u904d\u5386\u5217/\u904d\u5386box\u3002 \u7136\u540e\u628a \u4e8c\u8fdb\u5236\u6570 1 \u5de6\u79fb k \u4f4d\uff0c\u5f97\u5230\u504f\u79fb\u91cfshift\uff0c\u540e\u7eed\u4f7f\u7528\u6309\u4f4d\u6216 | \u6765\u5224\u65ad\u662f\u5426\u5b58\u5728\u3002 \u5df2AC\u7684C++\u4ee3\u7801: \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class Solution { public : bool isValidSudoku ( vector < vector < char >>& board ) { vector < int > row ( 9 ); // row[j]\u8868\u793a\u7b2cj \u884c\u76849\u4e2a\u6570\u5b57\u5404\u81ea\u7684\u5b58\u5728\u60c5\u51b5\uff0c\u540c\u7406\u4e8ecol, boxes vector < int > col ( 9 ); vector < int > boxes ( 9 ); int shiftInt = 0 ; for ( int i = 0 ; i < 9 ; i ++ ) { for ( int j = 0 ; j < 9 ; j ++ ) { if ( board [ i ][ j ] == '.' ) continue ; shiftInt = 1 << ( board [ i ][ j ] - '0' ); // \u8f6c\u4e3a\u4e8c\u8fdb\u5236\uff0c\u79fb\u4f4d\u7ed3\u675f\u540e\u76ee\u6807\u4f4d\u4e3a1\uff0c\u5176\u4ed6\u4f4d\u5747\u4e3a0 /* \u6bcf\u4e2a\u683c\u5b50\u82e5\u6709\u6570\u5b57\uff0c\u5fc5\u4e3a 1 ~ 9\uff0c\u8be5\u65b9\u6cd5\u9002\u7528\u4e8e \u904d\u5386\u884c/\u904d\u5386\u5217/\u904d\u5386box */ int boxPos = ( i / 3 ) * 3 + j / 3 ; //\u5c06\u5927\u6570\u72ec\u68cb\u76d8\u5206\u62109\u4e2a\u5c0f\u68cb\u76d8\uff0c\u7f16\u53f70~8 // \u5982\u679c\u5f53\u524d\u6570\u5b57shiftInt\u5728row[j] \u6216col[i] \u6216 boxes\u4e2d\u5df2\u7ecf\u5b58\u5728\uff0c&\u8fd0\u7b97\u540e\u4e0d\u4e3a0\uff0c // \u53ea\u6709\u5f53\u524d\u6570\u5b57\u6ca1\u51fa\u73b0\u8fc7\uff0c&\u8fd0\u7b97\u540e\u4e3a0 if (( col [ i ] & shiftInt ) != 0 || ( row [ j ] & shiftInt ) != 0 || ( boxes [ boxPos ] & shiftInt ) != 0 ) return false ; //\u7b2c n \u4f4d\u4ee3\u8868 n \u8fd9\u4e2a\u6570\u5b57\u662f\u5426\u5b58\u5728(1\u2192\u5b58\u5728\uff0c 0\u2192\u4e0d\u5b58\u5728)\uff0c\u540c\u7406\u4e8ecol[i] boxes[boxPos] row [ j ] |= shiftInt ; col [ i ] |= shiftInt ; boxes [ boxPos ] |= shiftInt ; } } return true ; } }; \u540e\u4e24\u79cd\u65b9\u6cd5\uff0c\u53c2\u8003: https://leetcode-cn.com/problems/valid-sudoku/solution/wei-yun-suan-qiu-jie-you-xiao-shu-du-c-b-sac7/ https://www.youtube.com/watch?v=ceOLAY4XUOw&ab_channel=JacobHuang","title":"leetcode36 \u6709\u6548\u7684\u6570\u72ec - \u4e2d\u7b49"},{"location":"solutions/leetcode36%20%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC%5B%E4%B8%AD%E7%AD%89%5D/#36","text":"","title":"36. \u6709\u6548\u7684\u6570\u72ec"},{"location":"solutions/leetcode36%20%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC%5B%E4%B8%AD%E7%AD%89%5D/#valid-sudoku","text":"\u25cf \u96be\u5ea6: \u4e2d\u7b49 \u8bf7\u4f60\u5224\u65ad\u4e00\u4e2a 9x9 \u7684\u6570\u72ec\u662f\u5426\u6709\u6548\u3002\u53ea\u9700\u8981 \u6839\u636e\u4ee5\u4e0b\u89c4\u5219 \uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684 3x3 \u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002\uff08\u8bf7\u53c2\u8003\u793a\u4f8b\u56fe\uff09 \u6570\u72ec\u90e8\u5206\u7a7a\u683c\u5185\u5df2\u586b\u5165\u4e86\u6570\u5b57\uff0c\u7a7a\u767d\u683c\u7528 '.' \u8868\u793a\u3002 \u6ce8\u610f\uff1a \u4e00\u4e2a\u6709\u6548\u7684\u6570\u72ec\uff08\u90e8\u5206\u5df2\u88ab\u586b\u5145\uff09\u4e0d\u4e00\u5b9a\u662f\u53ef\u89e3\u7684\u3002 \u53ea\u9700\u8981\u6839\u636e\u4ee5\u4e0a\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 8 9 10 11 \u8f93\u5165\uff1aboard = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"] ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"] ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"] ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"] ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"] ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"] ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"] ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"] ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]] \u8f93\u51fa\uff1atrue \u793a\u4f8b 2\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 \u8f93\u5165\uff1aboard = [[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"] ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"] ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"] ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"] ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"] ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"] ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"] ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"] ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]] \u8f93\u51fa\uff1afalse \u89e3\u91ca\uff1a\u9664\u4e86\u7b2c\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u4ece 5 \u6539\u4e3a 8 \u4ee5\u5916\uff0c\u7a7a\u683c\u5185\u5176\u4ed6\u6570\u5b57\u5747\u4e0e \u793a\u4f8b1 \u76f8\u540c\u3002 \u4f46\u7531\u4e8e\u4f4d\u4e8e\u5de6\u4e0a\u89d2\u7684 3x3 \u5bab\u5185\u6709\u4e24\u4e2a 8 \u5b58\u5728, \u56e0\u6b64\u8fd9\u4e2a\u6570\u72ec\u662f\u65e0\u6548\u7684\u3002 \u63d0\u793a\uff1a board.length == 9 board[i].length == 9 board[i][j] \u662f\u4e00\u4f4d\u6570\u5b57\u6216\u8005 '.'","title":"\u82f1\u6587\u9898\u76ee: Valid sudoku"},{"location":"solutions/leetcode36%20%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC%5B%E4%B8%AD%E7%AD%89%5D/#_1","text":"","title":"\u5206\u6790"},{"location":"solutions/leetcode36%20%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC%5B%E4%B8%AD%E7%AD%89%5D/#1","text":"\u4f7f\u7528set\uff0c \u5bf9\u4e8e\u884c\u904d\u5386: \u6bcf\u4e00\u884c\u4e2d, isValid: unique\u7684\u6570\u5b57\u6570\u91cf+'.'\u7684\u6570\u91cf = 9, \u5bf9\u4e8e\u5217\u904d\u5386\uff1a\u6bcf\u4e00\u5217\u4e2d, isValid: unique\u7684\u6570\u5b57\u6570\u91cf+'.'\u7684\u6570\u91cf = 9, \u5bf9\u4e8ebox\u904d\u5386\uff1a\u6bcf\u4e2a3\u884c3\u5217\u4e5d\u5bab\u683c\u4e2d\uff0cisValid: unique\u7684\u6570\u5b57\u6570\u91cf+'.'\u7684\u6570\u91cf = 9\u3002 \u5df2AC\u4ee3\u7801: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 class Solution { public : bool isValidSudoku ( vector < vector < char >> & board ) { bool isValid = true ; // \u904d\u5386\u884c for ( int i = 0 ; i < 9 ; i ++ ) { set < char > st ; vector < char > rowVec = board [ i ]; int dotCount = 0 ; for ( int k = 0 ; k < 9 ; k ++ ) { if ( rowVec [ k ] == '.' ) { dotCount ++ ; } else st . insert ( rowVec [ k ]); } int uniqueCharCount = st . size (); if ( uniqueCharCount + dotCount != 9 ) { isValid = false ; } } // \u904d\u5386\u5217 for ( int i = 0 ; i < 9 ; i ++ ) { set < char > st ; int dotCount = 0 ; for ( int k = 0 ; k < 9 ; k ++ ) { if ( board [ k ][ i ] == '.' ) { dotCount ++ ; } else st . insert ( board [ k ][ i ]); } int uniqueCharCount = st . size (); if ( uniqueCharCount + dotCount != 9 ) { isValid = false ; } } // \u904d\u5386\u5c0fgrid: \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684 3x3 \u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 for ( int si = 0 ; si <= 6 ; si += 3 ) for ( int sj = 0 ; sj <= 6 ; sj += 3 ) { set < char > st ; int dotCount = 0 ; for ( int i = si ; i < si + 3 ; i ++ ) { for ( int j = sj ; j < sj + 3 ; j ++ ) { if ( board [ i ][ j ] == '.' ) dotCount += 1 ; else st . insert ( board [ i ][ j ]); } } if ( st . size () + dotCount != 9 ) isValid = false ; } return isValid ; } }; \u8ddf\u56fd\u5916\u7684\u5c0f\u4f19\u4f34\u60f3\u5230\u4e00\u5757\u53bb\u4e86\u3002 https://leetcode.com/problems/valid-sudoku/discuss/869625/easy-C%2B%2B-with-set","title":"\u65b9\u6cd51\u3001\u86ee\u529b\u76f4\u63a5\u6cd5"},{"location":"solutions/leetcode36%20%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC%5B%E4%B8%AD%E7%AD%89%5D/#2set-","text":"\u5750\u6807\u4e2d\u4efb\u610f\u4e00\u70b9(i,j)\uff0c\u53ef\u4ee5map\u5230\u5bf9\u5e94\u7684\u7684\u7b2c\u51e0\u884c\u7b2c\u51e0\u5217\u7684\u65b9\u5757(box)\u4e2d\uff0cbox\u7684\u5750\u6807\u4e3a(i/3, j/3)\u3002 \u4e8e\u662f\u628a\u4e00\u4e2a\u5c0f\u7684\u4e5d\u5bab\u683c\u4e2d\u7684\u6570\u5168\u538b\u7f29\u5230\u4e00\u4e2abox\u4e2d\uff0c\u6bd4\u5982\uff1a \u4ee5\u6700\u4e2d\u95f4\u90a3\u4e2a\u4e5d\u5bab\u683c\u4e3a\u4f8b\uff0c\u4f7f\u7528int\u578b\u7684/3\u53ef\u4ee5\u5f97\u5230: \u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u503c\u4e0d\u4e3a'.'\u7684\u5b57\u7b26\uff0c\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c: 1.\u628a\u6240\u5728row\u7684\u4fe1\u606f\u63d2\u5165\u5230\u5927\u4e5d\u5bab\u683c\u4e2d; 2.\u628a\u6240\u5728column\u7684\u4fe1\u606f\u63d2\u5165\u5230\u5927\u4e5d\u5bab\u683c\u4e2d; 3.\u628a\u6240\u5728\u7684\u5c0f\u65b9\u5757(box)\u7684\u4fe1\u606f\u63d2\u5165\u5230\u5927\u4e5d\u5bab\u683c\u4e2d\u3002 \u63d2\u5165\u5982\u679c\u5931\u8d25\u8bf4\u660e\u51fa\u73b0\u4e86\u91cd\u590d\u3002","title":"\u65b9\u6cd52\uff1aset\u63d2\u5165\u65b9\u6cd5 - \u6539\u8fdb"},{"location":"solutions/leetcode36%20%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC%5B%E4%B8%AD%E7%AD%89%5D/#acc","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { public : bool isValidSudoku ( vector < vector < char >>& board ) { set < string > st ; for ( int i = 0 ; i < 9 ; i ++ ) { for ( int j = 0 ; j < 9 ; j ++ ) { char ch = board [ i ][ j ]; // \u4f7f\u7528i / 3 + \",\" + j / 3 \u5f97\u5230\u5bf9\u5e94\u7b2c\u51e0\u884c\u7b2c\u51e0\u5217\u7684\u65b9\u5757(box) if ( ch != '.' ){ string val ; val . push_back ( ch ); /* \u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u503c\u4e0d\u4e3a'.'\u7684\u5b57\u7b26 1.\u628a\u6240\u5728row\u7684\u4fe1\u606f\u63d2\u5165\u5230\u5927\u4e5d\u5bab\u683c\u4e2d; 2.\u628a\u6240\u5728column\u7684\u4fe1\u606f\u63d2\u5165\u5230\u5927\u4e5d\u5bab\u683c\u4e2d; 3.\u628a\u6240\u5728\u7684\u5c0f\u65b9\u5757(box)\u7684\u4fe1\u606f\u63d2\u5165\u5230\u5927\u4e5d\u5bab\u683c\u4e2d\u3002 \u63d2\u5165\u5982\u679c\u5931\u8d25\u8bf4\u660e\u51fa\u73b0\u4e86\u91cd\u590d\u3002 */ if ( ! st . insert ( val + \" in row \" + to_string ( i )). second || ! st . insert ( val + \" in column \" + to_string ( j )). second || ! st . insert ( val + \" in box \" + to_string ( i / 3 ) + \",\" + to_string ( j / 3 )). second ) return false ; /* set\u63d2\u5165\u5931\u8d25\u65f6\uff0c\u8868\u793a\u51fa\u73b0\u4e86\u91cd\u590d */ } } } return true ; } }; Java\u7684HashSet\u6709\u540c\u6837\u7684\u5199\u6cd5\uff0cJava\u4e2d\u63d2\u5165\u5931\u8d25\uff0c\u4f1a\u51fa\u73b0 set.Add() == false \u3002","title":"\u5df2AC\u7684C++\u4ee3\u7801:"},{"location":"solutions/leetcode36%20%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC%5B%E4%B8%AD%E7%AD%89%5D/#3","text":"\u6b64\u9898\uff0c\u4f7f\u7528\u4f4d\u64cd\u4f5c\uff0c\u662f\u51e0\u79cd\u89e3\u6cd5\u4e2d\u901f\u5ea6\u6700\u5feb\u7684\u7b97\u6cd5\u4e86\u3002 \u5177\u4f53\u505a\u6cd5\u662f\uff1a \u5c06\u5927\u6570\u72ec\u68cb\u76d8\u5206\u62109\u4e2a\u5c0f\u68cb\u76d8\uff0c\u7f16\u53f70~8\u3002 \u7a97\u53e3\u4e2d\u7684\u6bcf\u4e2a\u5c0f\u65b9\u683c\u82e5\u6709\u6570\u5b57\uff0c\u5fc5\u4e3a 1 ~ 9 (\u8bb0\u4f5ck)\uff0c\u8be5\u65b9\u6cd5\u9002\u7528\u4e8e \u904d\u5386\u884c/\u904d\u5386\u5217/\u904d\u5386box\u3002 \u7136\u540e\u628a \u4e8c\u8fdb\u5236\u6570 1 \u5de6\u79fb k \u4f4d\uff0c\u5f97\u5230\u504f\u79fb\u91cfshift\uff0c\u540e\u7eed\u4f7f\u7528\u6309\u4f4d\u6216 | \u6765\u5224\u65ad\u662f\u5426\u5b58\u5728\u3002","title":"\u65b9\u6cd53\uff1a\u4f7f\u7528\u4f4d\u64cd\u4f5c"},{"location":"solutions/leetcode36%20%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC%5B%E4%B8%AD%E7%AD%89%5D/#acc_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class Solution { public : bool isValidSudoku ( vector < vector < char >>& board ) { vector < int > row ( 9 ); // row[j]\u8868\u793a\u7b2cj \u884c\u76849\u4e2a\u6570\u5b57\u5404\u81ea\u7684\u5b58\u5728\u60c5\u51b5\uff0c\u540c\u7406\u4e8ecol, boxes vector < int > col ( 9 ); vector < int > boxes ( 9 ); int shiftInt = 0 ; for ( int i = 0 ; i < 9 ; i ++ ) { for ( int j = 0 ; j < 9 ; j ++ ) { if ( board [ i ][ j ] == '.' ) continue ; shiftInt = 1 << ( board [ i ][ j ] - '0' ); // \u8f6c\u4e3a\u4e8c\u8fdb\u5236\uff0c\u79fb\u4f4d\u7ed3\u675f\u540e\u76ee\u6807\u4f4d\u4e3a1\uff0c\u5176\u4ed6\u4f4d\u5747\u4e3a0 /* \u6bcf\u4e2a\u683c\u5b50\u82e5\u6709\u6570\u5b57\uff0c\u5fc5\u4e3a 1 ~ 9\uff0c\u8be5\u65b9\u6cd5\u9002\u7528\u4e8e \u904d\u5386\u884c/\u904d\u5386\u5217/\u904d\u5386box */ int boxPos = ( i / 3 ) * 3 + j / 3 ; //\u5c06\u5927\u6570\u72ec\u68cb\u76d8\u5206\u62109\u4e2a\u5c0f\u68cb\u76d8\uff0c\u7f16\u53f70~8 // \u5982\u679c\u5f53\u524d\u6570\u5b57shiftInt\u5728row[j] \u6216col[i] \u6216 boxes\u4e2d\u5df2\u7ecf\u5b58\u5728\uff0c&\u8fd0\u7b97\u540e\u4e0d\u4e3a0\uff0c // \u53ea\u6709\u5f53\u524d\u6570\u5b57\u6ca1\u51fa\u73b0\u8fc7\uff0c&\u8fd0\u7b97\u540e\u4e3a0 if (( col [ i ] & shiftInt ) != 0 || ( row [ j ] & shiftInt ) != 0 || ( boxes [ boxPos ] & shiftInt ) != 0 ) return false ; //\u7b2c n \u4f4d\u4ee3\u8868 n \u8fd9\u4e2a\u6570\u5b57\u662f\u5426\u5b58\u5728(1\u2192\u5b58\u5728\uff0c 0\u2192\u4e0d\u5b58\u5728)\uff0c\u540c\u7406\u4e8ecol[i] boxes[boxPos] row [ j ] |= shiftInt ; col [ i ] |= shiftInt ; boxes [ boxPos ] |= shiftInt ; } } return true ; } }; \u540e\u4e24\u79cd\u65b9\u6cd5\uff0c\u53c2\u8003: https://leetcode-cn.com/problems/valid-sudoku/solution/wei-yun-suan-qiu-jie-you-xiao-shu-du-c-b-sac7/ https://www.youtube.com/watch?v=ceOLAY4XUOw&ab_channel=JacobHuang","title":"\u5df2AC\u7684C++\u4ee3\u7801:"},{"location":"solutions/leetcode38%20%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97%28%E6%8A%A5%E6%95%B0%29%5B%E4%B8%AD%E7%AD%89%5D/","text":"38. \u5916\u89c2\u6570\u5217 (\u62a5\u6570) \u00b6 \u82f1\u6587\u9898\u76ee: Count and Say \u00b6 \u25cf \u96be\u5ea6: \u4e2d\u7b49 \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n \uff0c\u8f93\u51fa\u5916\u89c2\u6570\u5217\u7684\u7b2c n \u9879\u3002 \u300c\u5916\u89c2\u6570\u5217\u300d\u662f\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u4ece\u6570\u5b57 1 \u5f00\u59cb\uff0c\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e00\u9879\u90fd\u662f\u5bf9\u524d\u4e00\u9879\u7684\u63cf\u8ff0\u3002 \u4f60\u53ef\u4ee5\u5c06\u5176\u89c6\u4f5c\u662f\u7531\u9012\u5f52\u516c\u5f0f\u5b9a\u4e49\u7684\u6570\u5b57\u5b57\u7b26\u4e32\u5e8f\u5217\uff1a countAndSay(1) = \"1\" countAndSay(n) \u662f\u5bf9 countAndSay(n-1) \u7684\u63cf\u8ff0\uff0c\u7136\u540e\u8f6c\u6362\u6210\u53e6\u4e00\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32\u3002 \u524d\u4e94\u9879\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 1. 1 2. 11 3. 21 4. 1211 5. 111221 \u7b2c\u4e00\u9879\u662f\u6570\u5b57 1 \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 1 \u5373 \u201c \u4e00 \u4e2a 1 \u201d\uff0c\u8bb0\u4f5c \"11\" \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 11 \u5373 \u201c \u4e8c \u4e2a 1 \u201d \uff0c\u8bb0\u4f5c \"21\" \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 21 \u5373 \u201c \u4e00 \u4e2a 2 + \u4e00 \u4e2a 1 \u201d \uff0c\u8bb0\u4f5c \"1211\" \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 1211 \u5373 \u201c \u4e00 \u4e2a 1 + \u4e00 \u4e2a 2 + \u4e8c \u4e2a 1 \u201d \uff0c\u8bb0\u4f5c \"111221\" \u8981 \u63cf\u8ff0 \u4e00\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32\uff0c\u9996\u5148\u8981\u5c06\u5b57\u7b26\u4e32\u5206\u5272\u4e3a \u6700\u5c0f \u6570\u91cf\u7684\u7ec4\uff0c\u6bcf\u4e2a\u7ec4\u90fd\u7531\u8fde\u7eed\u7684\u6700\u591a \u76f8\u540c\u5b57\u7b26 \u7ec4\u6210\u3002\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u7ec4\uff0c\u5148\u63cf\u8ff0\u5b57\u7b26\u7684\u6570\u91cf\uff0c\u7136\u540e\u63cf\u8ff0\u5b57\u7b26\uff0c\u5f62\u6210\u4e00\u4e2a\u63cf\u8ff0\u7ec4\u3002\u8981\u5c06\u63cf\u8ff0\u8f6c\u6362\u4e3a\u6570\u5b57\u5b57\u7b26\u4e32\uff0c\u5148\u5c06\u6bcf\u7ec4\u4e2d\u7684\u5b57\u7b26\u6570\u91cf\u7528\u6570\u5b57\u66ff\u6362\uff0c\u518d\u5c06\u6240\u6709\u63cf\u8ff0\u7ec4\u8fde\u63a5\u8d77\u6765\u3002 \u4f8b\u5982\uff0c\u6570\u5b57\u5b57\u7b26\u4e32 \"3322251\" \u7684\u63cf\u8ff0\u5982\u4e0b\u56fe\uff1a \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1an = 1 \u8f93\u51fa\uff1a\"1\" \u89e3\u91ca\uff1a\u8fd9\u662f\u4e00\u4e2a\u57fa\u672c\u6837\u4f8b\u3002 \u793a\u4f8b 2\uff1a 1 2 3 4 5 6 7 \u8f93\u5165\uff1an = 4 \u8f93\u51fa\uff1a\"1211\" \u89e3\u91ca\uff1a countAndSay(1) = \"1\" countAndSay(2) = \u8bfb \"1\" = \u4e00 \u4e2a 1 = \"11\" countAndSay(3) = \u8bfb \"11\" = \u4e8c \u4e2a 1 = \"21\" countAndSay(4) = \u8bfb \"21\" = \u4e00 \u4e2a 2 + \u4e00 \u4e2a 1 = \"12\" + \"11\" = \"1211\" \u63d0\u793a\uff1a 1 <= n <= 30 \u5206\u6790: \u00b6 \u672c\u9898\u53ef\u4f7f\u7528\u9012\u5f52\u6216\u8fed\u4ee3\u6765\u89e3\u51b3\uff0c\u4e0b\u9762\u7684\u51e0\u79cd\u65b9\u6cd5\u90fd\u4f7f\u7528\u4e86\u8fed\u4ee3\u3002 \u4e3b\u4f53\u601d\u8def: \u4ee5\u5df2\u77e5a4=1211, \u6765\u6c42a5\u4e3a\u4f8b\u6765\u8bf4\u660e\u5982\u4f55\u7528\u8fed\u4ee3\u6cd5\u5b9e\u73b0\u3002 \u9996\u5148\u5c06\u4e0d\u540c\u5b57\u7b26\u95f4(\u7528\u865a\u7ebf)\u5212\u5f00\u8fdb\u884c\u5206\u7247\uff0c\u5373 1|2|11\uff0c\u5206\u522b\u7edf\u8ba1\u5404\u4e2a\u5206\u7247\u4e2d\u8fde\u7eed\u76f8\u540c\u7684\u5b57\u7b26\u6570\u5373\u53ef\u3002 \u65b9\u6cd51 \u00b6 \u672c\u9898\u4ecef(1)\u5230f(n)\u9700\u8981\u8fed\u4ee3 n-1 \u6b21\u6765\u89e3\u51b3\uff0c\u6bcf\u6b21\u8fed\u4ee3\u4ee5\u4e0a\u4e00\u6b21\u7684\u8fed\u4ee3\u7ed3\u679c\u4f5c\u4e3a\u8d77\u70b9\uff0c\u5c06\u8be5\u8fed\u4ee3\u7ed3\u679cres\u4e2d\u4e0d\u540c\u5b57\u7b26\u95f4(\u7528\u865a\u7ebf)\u5212\u5f00\u8fdb\u884c\u5206\u7247\uff0c\u5373 1|2|11\u3002 \u5f53\u5faa\u73af\u53d8\u91cf\u4ece0 -> n-1 \u4e14\u6ca1\u5230\u672b\u5c3e\u7684\u5206\u7247\u65f6, \u6bcf\u51fa\u73b0\u65b0\u7684\u5b57\u7b26\u65f6\uff0c\u628a\u5df2\u5904\u7406\u7684\u8fde\u7eed\u76f8\u540c\u5b57\u7b26\u7684\u4fe1\u606f\u63d2\u5165\u5230\u7ed3\u679c\u5b57\u7b26\u4e32\u4e2d\u3002\u800c\u5230\u672b\u5c3e\u5206\u7247\u65f6\uff0c\u9700\u8981\u5355\u72ec\u628a\u672b\u5c3e\u8fde\u7eed\u76f8\u540c\u5b57\u7b26\u7684\u4fe1\u606f\u63d2\u5165\u5230\u7ed3\u679c\u5b57\u7b26\u4e32\u4e2d\uff0c\u56e0\u4e3a\u5bf9\u672b\u5c3e\u4e00\u6bb5\u5b57\u7b26\u6765\u8bf4\uff0c\u4e0d\u4f1a\u518d\u6709\u65b0\u7684\u5b57\u7b26\u4e86\uff0c\u8be5\u6570\u636e\u4e5f\u9700\u8981\u5199\u5165\u3002 \u5df2AC\u7684C++\u4ee3\u7801 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class Solution { public : string countAndSay ( int n ) { if ( n == 1 ) return \"1\" ; // f(1) = 1 string res = \"1\" ; // f(1) = 1, \u4f5c\u4e3a\u8fed\u4ee3\u7684\u521d\u59cb\u503c\u653e\u5165\u5230\u7ed3\u679c\u4e2d for ( int i = 0 ; i < n -1 ; i ++ ) { string currentCombinedStr = \"\" ; char curFirstChar = res [ 0 ]; // \u5b58\u653e\u5f53\u524d\u5206\u7247\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26 int currentCharCount = 0 ; for ( char ch : res ) // \u5c06\u5f53\u524d\u7684\u5b57\u7b26\u4e0e\u5f53\u524d\u5206\u7247\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u6bd4\u8f83 { if ( ch == curFirstChar ) currentCharCount += 1 ; else { // \u51fa\u73b0\u65b0\u7684\u5b57\u7b26\u65f6\uff0c\u628a\u5df2\u5904\u7406\u7684\u8fde\u7eed\u76f8\u540c\u5b57\u7b26\u7684\u4fe1\u606f\u63d2\u5165\u5230\u7ed3\u679c\u5b57\u7b26\u4e32\u4e2d currentCombinedStr . append ( to_string ( currentCharCount )); currentCombinedStr . push_back ( curFirstChar ); curFirstChar = ch ; currentCharCount = 1 ; } } // \u628a\u672b\u5c3e\u8fde\u7eed\u76f8\u540c\u5b57\u7b26\u7684\u4fe1\u606f\u63d2\u5165\u5230\u7ed3\u679c\u5b57\u7b26\u4e32\u4e2d(\u5bf9\u672b\u5c3e\u4e00\u6bb5\u5b57\u7b26\u6765\u8bf4\uff0c\u4e0d\u4f1a\u518d\u6709\u65b0\u7684\u5b57\u7b26\u4e86) currentCombinedStr . append ( to_string ( currentCharCount )); currentCombinedStr . push_back ( curFirstChar ); res = currentCombinedStr ; // \u5c06\u7ed3\u679c\u7528\u4f5c\u4e0b\u4e00\u8f6e\u5faa\u73af\u7684\u521d\u59cb\u503c } return res ; } }; \u65b9\u6cd52 \u00b6 \u601d\u8def\u4e0e\u65b9\u6cd51\u7c7b\u4f3c\uff0c\u53ea\u662f\u5c06 \u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u8fde\u7eed\u76f8\u7b49\u6570\u7684\u6570\u91cf \u7684\u529f\u80fd\u5c01\u88c5\u6210\u5355\u72ec\u7684\u51fd\u6570\uff0c\u4ee5\u4fbf\u540e\u9762\u4f7f\u7528\u3002 \u5df2AC\u7684C++\u4ee3\u7801 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution { public : string countAndSay ( int n ) { string res = \"1\" ; // f(1) = 1 while ( n > 1 ) { string curStr = \"\" ; for ( int i = 0 ; i < res . size (); i ++ ) { int count = getRepeatCount ( res . substr ( i )); // \u622a\u53d6\u4ece\u5f53\u524d\u5b57\u7b26\u5230\u672b\u5c3e\u7684\u5b50\u4e32 curStr += to_string ( count ); curStr . push_back ( res [ i ]); // \u8df3\u8fc7\u91cd\u590d\u7684\u5b57\u7b26, \u5171\u5904\u7406\u4e00\u6b21\u5373\u53ef i = i + count - 1 ; } n -- ; // \u603b\u5171\u9700\u8981\u8fed\u4ee3 n-1 \u6b21 res = curStr ; // \u5c06\u7ed3\u679c\u7528\u4f5c\u4e0b\u4e00\u8f6e\u5faa\u73af\u7684\u521d\u59cb\u503c } return res ; } /* \u5f97\u5230\u5b57\u7b26\u4e32 str \u4e2d\u7b2c\u4e00\u4e2a\u5206\u7247\u4e2d\u8fde\u7eed\u76f8\u7b49\u6570\u7684\u91cd\u590d\u4e2a\u6570\uff0c\u4f8b\u5982: \"111221\" \u8fd4\u56de 3, \"2\" \u8fd4\u56de 1 */ int getRepeatCount ( string str ) { int count = 1 ; char same = str [ 0 ]; for ( int i = 1 ; i < str . size (); i ++ ) { if ( same == str [ i ]) { count ++ ; } else { break ; } } return count ; } }; \u65b9\u6cd53 \u00b6 \u61c2\u4e86\u65b9\u6cd51 \u6216 \u65b9\u6cd52\u540e\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u5b8c\u6210\u3002 \u5df2AC\u7684C++\u4ee3\u7801 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public : string countAndSay ( int n ) { if ( n <= 0 ) return \"\" ; string res = \"1\" ; while ( -- n ) { string curStr = \"\" ; for ( int i = 0 ; i < res . size (); ++ i ) { int count = 1 ; // \u51fa\u73b0\u7b2c\u4e00\u4e2a\u65b0\u5b57\u7b26, count\u7f6e\u4e3a1 while ( i + 1 < res . size () && res [ i ] == res [ i + 1 ]) { /* \u8fd9\u91cc\u4e0e\u4e0a1\u5c42\u5faa\u73af\u7528\u7684\u662f\u540c\u4e00\u4e2ai, \u4e14\u533a\u95f4\u662f\u4e0a\u5c42\u5faa\u73af\u7684\u5b50\u533a\u95f4, \u6545\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2) */ count ++ ; i ++ ; } curStr += to_string ( count ) + res [ i ]; } res = curStr ; // \u5c06\u7ed3\u679c\u7528\u4f5c\u4e0b\u4e00\u8f6e\u5faa\u73af\u7684\u521d\u59cb\u503c } return res ; } }; \u4ee5\u4e0a3\u79cd\u65b9\u6cd5\u90fd\u662f \u8fed\u4ee3\u6cd5 \u7684\u5b9e\u73b0\uff0c\u672c\u9898\u8fd8\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u6765\u505a\uff0c\u6709\u5174\u8da3\u7684\u5c0f\u4f19\u4f34\u53ef\u4ee5\u8bd5\u8bd5~ \u672c\u4eba\u516c\u4f17\u53f7 \u5927\u767d\u6280\u672f\u63a7 , 2\u4e07\u8bfb\u8005\u3002 \u77e5\u4e4e Bravo Yeung , 4.5\u4e07\u8bfb\u8005\u3002 B\u7ad9 \u6781\u5ba2\u5b66\u957f\u5440 , \u540e\u7eed\u4f1a\u7528\u89c6\u9891\u7684\u5f62\u5f0f\u6765\u5e26\u5927\u5bb6\u5237LeetCode\u9898\uff0c\u6b22\u8fce\u70b9\u4e2a\u5173\u6ce8\uff0c\u656c\u8bf7\u671f\u5f85~ \u66f4\u591a\u6e05\u6670\u6613\u61c2\u7684\u4ee3\u7801 (C++/Java/C#/Python/Go) \u7684 LeetCode \u9898\u89e3\uff0c\u4f1a\u5728\u6211\u7684 github \u4ed3\u5e93 https://github.com/yanglr/AlgoSolutions \u4e2d\u6301\u7eed\u66f4\u65b0, \u6b22\u8fce\u5c0f\u4f19\u4f34\u4eec star/fork\uff0c\u5982\u679c\u6709\u4e0d\u9519\u7684\u89e3\u6cd5\u4e5f\u6b22\u8fce\u63d0PR\u3002 ps: \u4ed3\u5e93\u7684\u4ee3\u7801\u4e2d\u53ef\u4ee5\u76f4\u63a5\u62ff\u6765\u672c\u5730\u8c03\u8bd5\u5594\uff0c\u6846\u67b6\u5df2\u642d\u597d\uff0c\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u8c03\u6574 test case\u5373\u53ef~","title":"leetcode38 \u5916\u89c2\u6570\u5217(\u62a5\u6570) - \u4e2d\u7b49"},{"location":"solutions/leetcode38%20%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97%28%E6%8A%A5%E6%95%B0%29%5B%E4%B8%AD%E7%AD%89%5D/#38","text":"","title":"38. \u5916\u89c2\u6570\u5217 (\u62a5\u6570)"},{"location":"solutions/leetcode38%20%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97%28%E6%8A%A5%E6%95%B0%29%5B%E4%B8%AD%E7%AD%89%5D/#count-and-say","text":"\u25cf \u96be\u5ea6: \u4e2d\u7b49 \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n \uff0c\u8f93\u51fa\u5916\u89c2\u6570\u5217\u7684\u7b2c n \u9879\u3002 \u300c\u5916\u89c2\u6570\u5217\u300d\u662f\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u4ece\u6570\u5b57 1 \u5f00\u59cb\uff0c\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e00\u9879\u90fd\u662f\u5bf9\u524d\u4e00\u9879\u7684\u63cf\u8ff0\u3002 \u4f60\u53ef\u4ee5\u5c06\u5176\u89c6\u4f5c\u662f\u7531\u9012\u5f52\u516c\u5f0f\u5b9a\u4e49\u7684\u6570\u5b57\u5b57\u7b26\u4e32\u5e8f\u5217\uff1a countAndSay(1) = \"1\" countAndSay(n) \u662f\u5bf9 countAndSay(n-1) \u7684\u63cf\u8ff0\uff0c\u7136\u540e\u8f6c\u6362\u6210\u53e6\u4e00\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32\u3002 \u524d\u4e94\u9879\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 1. 1 2. 11 3. 21 4. 1211 5. 111221 \u7b2c\u4e00\u9879\u662f\u6570\u5b57 1 \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 1 \u5373 \u201c \u4e00 \u4e2a 1 \u201d\uff0c\u8bb0\u4f5c \"11\" \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 11 \u5373 \u201c \u4e8c \u4e2a 1 \u201d \uff0c\u8bb0\u4f5c \"21\" \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 21 \u5373 \u201c \u4e00 \u4e2a 2 + \u4e00 \u4e2a 1 \u201d \uff0c\u8bb0\u4f5c \"1211\" \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 1211 \u5373 \u201c \u4e00 \u4e2a 1 + \u4e00 \u4e2a 2 + \u4e8c \u4e2a 1 \u201d \uff0c\u8bb0\u4f5c \"111221\" \u8981 \u63cf\u8ff0 \u4e00\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32\uff0c\u9996\u5148\u8981\u5c06\u5b57\u7b26\u4e32\u5206\u5272\u4e3a \u6700\u5c0f \u6570\u91cf\u7684\u7ec4\uff0c\u6bcf\u4e2a\u7ec4\u90fd\u7531\u8fde\u7eed\u7684\u6700\u591a \u76f8\u540c\u5b57\u7b26 \u7ec4\u6210\u3002\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u7ec4\uff0c\u5148\u63cf\u8ff0\u5b57\u7b26\u7684\u6570\u91cf\uff0c\u7136\u540e\u63cf\u8ff0\u5b57\u7b26\uff0c\u5f62\u6210\u4e00\u4e2a\u63cf\u8ff0\u7ec4\u3002\u8981\u5c06\u63cf\u8ff0\u8f6c\u6362\u4e3a\u6570\u5b57\u5b57\u7b26\u4e32\uff0c\u5148\u5c06\u6bcf\u7ec4\u4e2d\u7684\u5b57\u7b26\u6570\u91cf\u7528\u6570\u5b57\u66ff\u6362\uff0c\u518d\u5c06\u6240\u6709\u63cf\u8ff0\u7ec4\u8fde\u63a5\u8d77\u6765\u3002 \u4f8b\u5982\uff0c\u6570\u5b57\u5b57\u7b26\u4e32 \"3322251\" \u7684\u63cf\u8ff0\u5982\u4e0b\u56fe\uff1a \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1an = 1 \u8f93\u51fa\uff1a\"1\" \u89e3\u91ca\uff1a\u8fd9\u662f\u4e00\u4e2a\u57fa\u672c\u6837\u4f8b\u3002 \u793a\u4f8b 2\uff1a 1 2 3 4 5 6 7 \u8f93\u5165\uff1an = 4 \u8f93\u51fa\uff1a\"1211\" \u89e3\u91ca\uff1a countAndSay(1) = \"1\" countAndSay(2) = \u8bfb \"1\" = \u4e00 \u4e2a 1 = \"11\" countAndSay(3) = \u8bfb \"11\" = \u4e8c \u4e2a 1 = \"21\" countAndSay(4) = \u8bfb \"21\" = \u4e00 \u4e2a 2 + \u4e00 \u4e2a 1 = \"12\" + \"11\" = \"1211\" \u63d0\u793a\uff1a 1 <= n <= 30","title":"\u82f1\u6587\u9898\u76ee: Count and Say"},{"location":"solutions/leetcode38%20%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97%28%E6%8A%A5%E6%95%B0%29%5B%E4%B8%AD%E7%AD%89%5D/#_1","text":"\u672c\u9898\u53ef\u4f7f\u7528\u9012\u5f52\u6216\u8fed\u4ee3\u6765\u89e3\u51b3\uff0c\u4e0b\u9762\u7684\u51e0\u79cd\u65b9\u6cd5\u90fd\u4f7f\u7528\u4e86\u8fed\u4ee3\u3002 \u4e3b\u4f53\u601d\u8def: \u4ee5\u5df2\u77e5a4=1211, \u6765\u6c42a5\u4e3a\u4f8b\u6765\u8bf4\u660e\u5982\u4f55\u7528\u8fed\u4ee3\u6cd5\u5b9e\u73b0\u3002 \u9996\u5148\u5c06\u4e0d\u540c\u5b57\u7b26\u95f4(\u7528\u865a\u7ebf)\u5212\u5f00\u8fdb\u884c\u5206\u7247\uff0c\u5373 1|2|11\uff0c\u5206\u522b\u7edf\u8ba1\u5404\u4e2a\u5206\u7247\u4e2d\u8fde\u7eed\u76f8\u540c\u7684\u5b57\u7b26\u6570\u5373\u53ef\u3002","title":"\u5206\u6790:"},{"location":"solutions/leetcode38%20%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97%28%E6%8A%A5%E6%95%B0%29%5B%E4%B8%AD%E7%AD%89%5D/#1","text":"\u672c\u9898\u4ecef(1)\u5230f(n)\u9700\u8981\u8fed\u4ee3 n-1 \u6b21\u6765\u89e3\u51b3\uff0c\u6bcf\u6b21\u8fed\u4ee3\u4ee5\u4e0a\u4e00\u6b21\u7684\u8fed\u4ee3\u7ed3\u679c\u4f5c\u4e3a\u8d77\u70b9\uff0c\u5c06\u8be5\u8fed\u4ee3\u7ed3\u679cres\u4e2d\u4e0d\u540c\u5b57\u7b26\u95f4(\u7528\u865a\u7ebf)\u5212\u5f00\u8fdb\u884c\u5206\u7247\uff0c\u5373 1|2|11\u3002 \u5f53\u5faa\u73af\u53d8\u91cf\u4ece0 -> n-1 \u4e14\u6ca1\u5230\u672b\u5c3e\u7684\u5206\u7247\u65f6, \u6bcf\u51fa\u73b0\u65b0\u7684\u5b57\u7b26\u65f6\uff0c\u628a\u5df2\u5904\u7406\u7684\u8fde\u7eed\u76f8\u540c\u5b57\u7b26\u7684\u4fe1\u606f\u63d2\u5165\u5230\u7ed3\u679c\u5b57\u7b26\u4e32\u4e2d\u3002\u800c\u5230\u672b\u5c3e\u5206\u7247\u65f6\uff0c\u9700\u8981\u5355\u72ec\u628a\u672b\u5c3e\u8fde\u7eed\u76f8\u540c\u5b57\u7b26\u7684\u4fe1\u606f\u63d2\u5165\u5230\u7ed3\u679c\u5b57\u7b26\u4e32\u4e2d\uff0c\u56e0\u4e3a\u5bf9\u672b\u5c3e\u4e00\u6bb5\u5b57\u7b26\u6765\u8bf4\uff0c\u4e0d\u4f1a\u518d\u6709\u65b0\u7684\u5b57\u7b26\u4e86\uff0c\u8be5\u6570\u636e\u4e5f\u9700\u8981\u5199\u5165\u3002","title":"\u65b9\u6cd51"},{"location":"solutions/leetcode38%20%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97%28%E6%8A%A5%E6%95%B0%29%5B%E4%B8%AD%E7%AD%89%5D/#acc","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class Solution { public : string countAndSay ( int n ) { if ( n == 1 ) return \"1\" ; // f(1) = 1 string res = \"1\" ; // f(1) = 1, \u4f5c\u4e3a\u8fed\u4ee3\u7684\u521d\u59cb\u503c\u653e\u5165\u5230\u7ed3\u679c\u4e2d for ( int i = 0 ; i < n -1 ; i ++ ) { string currentCombinedStr = \"\" ; char curFirstChar = res [ 0 ]; // \u5b58\u653e\u5f53\u524d\u5206\u7247\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26 int currentCharCount = 0 ; for ( char ch : res ) // \u5c06\u5f53\u524d\u7684\u5b57\u7b26\u4e0e\u5f53\u524d\u5206\u7247\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u6bd4\u8f83 { if ( ch == curFirstChar ) currentCharCount += 1 ; else { // \u51fa\u73b0\u65b0\u7684\u5b57\u7b26\u65f6\uff0c\u628a\u5df2\u5904\u7406\u7684\u8fde\u7eed\u76f8\u540c\u5b57\u7b26\u7684\u4fe1\u606f\u63d2\u5165\u5230\u7ed3\u679c\u5b57\u7b26\u4e32\u4e2d currentCombinedStr . append ( to_string ( currentCharCount )); currentCombinedStr . push_back ( curFirstChar ); curFirstChar = ch ; currentCharCount = 1 ; } } // \u628a\u672b\u5c3e\u8fde\u7eed\u76f8\u540c\u5b57\u7b26\u7684\u4fe1\u606f\u63d2\u5165\u5230\u7ed3\u679c\u5b57\u7b26\u4e32\u4e2d(\u5bf9\u672b\u5c3e\u4e00\u6bb5\u5b57\u7b26\u6765\u8bf4\uff0c\u4e0d\u4f1a\u518d\u6709\u65b0\u7684\u5b57\u7b26\u4e86) currentCombinedStr . append ( to_string ( currentCharCount )); currentCombinedStr . push_back ( curFirstChar ); res = currentCombinedStr ; // \u5c06\u7ed3\u679c\u7528\u4f5c\u4e0b\u4e00\u8f6e\u5faa\u73af\u7684\u521d\u59cb\u503c } return res ; } };","title":"\u5df2AC\u7684C++\u4ee3\u7801"},{"location":"solutions/leetcode38%20%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97%28%E6%8A%A5%E6%95%B0%29%5B%E4%B8%AD%E7%AD%89%5D/#2","text":"\u601d\u8def\u4e0e\u65b9\u6cd51\u7c7b\u4f3c\uff0c\u53ea\u662f\u5c06 \u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u8fde\u7eed\u76f8\u7b49\u6570\u7684\u6570\u91cf \u7684\u529f\u80fd\u5c01\u88c5\u6210\u5355\u72ec\u7684\u51fd\u6570\uff0c\u4ee5\u4fbf\u540e\u9762\u4f7f\u7528\u3002","title":"\u65b9\u6cd52"},{"location":"solutions/leetcode38%20%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97%28%E6%8A%A5%E6%95%B0%29%5B%E4%B8%AD%E7%AD%89%5D/#acc_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution { public : string countAndSay ( int n ) { string res = \"1\" ; // f(1) = 1 while ( n > 1 ) { string curStr = \"\" ; for ( int i = 0 ; i < res . size (); i ++ ) { int count = getRepeatCount ( res . substr ( i )); // \u622a\u53d6\u4ece\u5f53\u524d\u5b57\u7b26\u5230\u672b\u5c3e\u7684\u5b50\u4e32 curStr += to_string ( count ); curStr . push_back ( res [ i ]); // \u8df3\u8fc7\u91cd\u590d\u7684\u5b57\u7b26, \u5171\u5904\u7406\u4e00\u6b21\u5373\u53ef i = i + count - 1 ; } n -- ; // \u603b\u5171\u9700\u8981\u8fed\u4ee3 n-1 \u6b21 res = curStr ; // \u5c06\u7ed3\u679c\u7528\u4f5c\u4e0b\u4e00\u8f6e\u5faa\u73af\u7684\u521d\u59cb\u503c } return res ; } /* \u5f97\u5230\u5b57\u7b26\u4e32 str \u4e2d\u7b2c\u4e00\u4e2a\u5206\u7247\u4e2d\u8fde\u7eed\u76f8\u7b49\u6570\u7684\u91cd\u590d\u4e2a\u6570\uff0c\u4f8b\u5982: \"111221\" \u8fd4\u56de 3, \"2\" \u8fd4\u56de 1 */ int getRepeatCount ( string str ) { int count = 1 ; char same = str [ 0 ]; for ( int i = 1 ; i < str . size (); i ++ ) { if ( same == str [ i ]) { count ++ ; } else { break ; } } return count ; } };","title":"\u5df2AC\u7684C++\u4ee3\u7801"},{"location":"solutions/leetcode38%20%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97%28%E6%8A%A5%E6%95%B0%29%5B%E4%B8%AD%E7%AD%89%5D/#3","text":"\u61c2\u4e86\u65b9\u6cd51 \u6216 \u65b9\u6cd52\u540e\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u5b8c\u6210\u3002","title":"\u65b9\u6cd53"},{"location":"solutions/leetcode38%20%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97%28%E6%8A%A5%E6%95%B0%29%5B%E4%B8%AD%E7%AD%89%5D/#acc_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public : string countAndSay ( int n ) { if ( n <= 0 ) return \"\" ; string res = \"1\" ; while ( -- n ) { string curStr = \"\" ; for ( int i = 0 ; i < res . size (); ++ i ) { int count = 1 ; // \u51fa\u73b0\u7b2c\u4e00\u4e2a\u65b0\u5b57\u7b26, count\u7f6e\u4e3a1 while ( i + 1 < res . size () && res [ i ] == res [ i + 1 ]) { /* \u8fd9\u91cc\u4e0e\u4e0a1\u5c42\u5faa\u73af\u7528\u7684\u662f\u540c\u4e00\u4e2ai, \u4e14\u533a\u95f4\u662f\u4e0a\u5c42\u5faa\u73af\u7684\u5b50\u533a\u95f4, \u6545\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2) */ count ++ ; i ++ ; } curStr += to_string ( count ) + res [ i ]; } res = curStr ; // \u5c06\u7ed3\u679c\u7528\u4f5c\u4e0b\u4e00\u8f6e\u5faa\u73af\u7684\u521d\u59cb\u503c } return res ; } }; \u4ee5\u4e0a3\u79cd\u65b9\u6cd5\u90fd\u662f \u8fed\u4ee3\u6cd5 \u7684\u5b9e\u73b0\uff0c\u672c\u9898\u8fd8\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u6765\u505a\uff0c\u6709\u5174\u8da3\u7684\u5c0f\u4f19\u4f34\u53ef\u4ee5\u8bd5\u8bd5~ \u672c\u4eba\u516c\u4f17\u53f7 \u5927\u767d\u6280\u672f\u63a7 , 2\u4e07\u8bfb\u8005\u3002 \u77e5\u4e4e Bravo Yeung , 4.5\u4e07\u8bfb\u8005\u3002 B\u7ad9 \u6781\u5ba2\u5b66\u957f\u5440 , \u540e\u7eed\u4f1a\u7528\u89c6\u9891\u7684\u5f62\u5f0f\u6765\u5e26\u5927\u5bb6\u5237LeetCode\u9898\uff0c\u6b22\u8fce\u70b9\u4e2a\u5173\u6ce8\uff0c\u656c\u8bf7\u671f\u5f85~ \u66f4\u591a\u6e05\u6670\u6613\u61c2\u7684\u4ee3\u7801 (C++/Java/C#/Python/Go) \u7684 LeetCode \u9898\u89e3\uff0c\u4f1a\u5728\u6211\u7684 github \u4ed3\u5e93 https://github.com/yanglr/AlgoSolutions \u4e2d\u6301\u7eed\u66f4\u65b0, \u6b22\u8fce\u5c0f\u4f19\u4f34\u4eec star/fork\uff0c\u5982\u679c\u6709\u4e0d\u9519\u7684\u89e3\u6cd5\u4e5f\u6b22\u8fce\u63d0PR\u3002 ps: \u4ed3\u5e93\u7684\u4ee3\u7801\u4e2d\u53ef\u4ee5\u76f4\u63a5\u62ff\u6765\u672c\u5730\u8c03\u8bd5\u5594\uff0c\u6846\u67b6\u5df2\u642d\u597d\uff0c\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u8c03\u6574 test case\u5373\u53ef~","title":"\u5df2AC\u7684C++\u4ee3\u7801"},{"location":"solutions/leetcode4%20%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0%5B%E5%9B%B0%E9%9A%BE%5D/","text":"4. \u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570 \u00b6 \u82f1\u6587\u9898\u76ee: Median of two sorted arrays \u00b6 \u25cf \u96be\u5ea6: \u56f0\u96be \u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u5206\u522b\u4e3a m \u548c n \u7684\u6b63\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\uff09\u6570\u7ec4 nums1 \u548c nums2 \u3002\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u8fd9\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684 \u4e2d\u4f4d\u6570 \u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1anums1 = [1,3], nums2 = [2] \u8f93\u51fa\uff1a2.00000 \u89e3\u91ca\uff1a\u5408\u5e76\u6570\u7ec4 = [1,2,3] \uff0c\u4e2d\u4f4d\u6570 2 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1anums1 = [1,2], nums2 = [3,4] \u8f93\u51fa\uff1a2.50000 \u89e3\u91ca\uff1a\u5408\u5e76\u6570\u7ec4 = [1,2,3,4] \uff0c\u4e2d\u4f4d\u6570 (2 + 3) / 2 = 2.5 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1anums1 = [0,0], nums2 = [0,0] \u8f93\u51fa\uff1a0.00000 \u793a\u4f8b 4\uff1a 1 2 \u8f93\u5165\uff1anums1 = [], nums2 = [1] \u8f93\u51fa\uff1a1.00000 \u793a\u4f8b 5\uff1a 1 2 \u8f93\u5165\uff1anums1 = [2], nums2 = [] \u8f93\u51fa\uff1a2.00000 \u63d0\u793a\uff1a nums1.length == m nums2.length == n 0 <= m <= 1000 0 <= n <= 1000 1 <= m + n <= 2000 -106 <= nums1[i], nums2[i] <= 10^6 \u8fdb\u9636\uff1a \u4f60\u80fd\u8bbe\u8ba1\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log (m+n)) \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u5417\uff1f \u601d\u8def \u00b6 \u5148\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\uff0c\u7136\u540e\u6839\u636e\u6570\u7ec4\u957f\u5ea6\u7684\u5947\u5076\u6765\u53d6\u5230\u4e2d\u4f4d\u6570\u3002\u5982\u679c\u662f\u5076\u6570\u4e2a\uff0c\u5c31\u53d6\u4e2d\u95f4\u4e24\u4e2a\u7684\u5e73\u5747\u6570\uff1b\u5982\u679c\u662f\u5947\u6570\u4e2a\uff0c\u76f4\u63a5\u53d6\u6700\u4e2d\u95f4\u7684\u5373\u53ef\u3002 \u4e0e leetcode 88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4 \u7c7b\u4f3c\u3002 \u5df2AC\u7684C++\u4ee3\u7801: \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class Solution { public : double findMedianSortedArrays ( vector < int >& nums1 , vector < int >& nums2 ) { vector < int > nums ; double res ; int m = nums1 . size (); int n = nums2 . size (); int len ; int i = 0 , j = 0 ; while ( i < m && j < n ) // \u53ea\u8981\u4e00\u4e2a\u6307\u9488\u626b\u5230\u6570\u7ec4\u672b\u5c3e\uff0c\u5faa\u73af\u7ed3\u675f { if ( nums1 [ i ] <= nums2 [ j ]) { nums . push_back ( nums1 [ i ]); i ++ ; } else { nums . push_back ( nums2 [ j ]); j ++ ; } } while ( i < m ) // \u6570\u7ec4nums1\u6ca1\u8dd1\u5b8c\uff0cnums2\u5df2\u8dd1\u5b8c\u65f6 { nums . push_back ( nums1 [ i ]); i ++ ; } while ( j < n ) // \u6570\u7ec4nums2\u6ca1\u8dd1\u5b8c\uff0cnums1\u5df2\u8dd1\u5b8c\u65f6 { nums . push_back ( nums2 [ j ]); j ++ ; } len = nums . size (); if ( len % 2 == 0 ) { res = ( nums [ len / 2 ] + nums [ len / 2-1 ]) / 2.0 ; } else res = nums [ len / 2 ]; return res ; } };","title":"leetcode4 \u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570 - \u56f0\u96be"},{"location":"solutions/leetcode4%20%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0%5B%E5%9B%B0%E9%9A%BE%5D/#4","text":"","title":"4. \u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570"},{"location":"solutions/leetcode4%20%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0%5B%E5%9B%B0%E9%9A%BE%5D/#median-of-two-sorted-arrays","text":"\u25cf \u96be\u5ea6: \u56f0\u96be \u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u5206\u522b\u4e3a m \u548c n \u7684\u6b63\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\uff09\u6570\u7ec4 nums1 \u548c nums2 \u3002\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u8fd9\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684 \u4e2d\u4f4d\u6570 \u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1anums1 = [1,3], nums2 = [2] \u8f93\u51fa\uff1a2.00000 \u89e3\u91ca\uff1a\u5408\u5e76\u6570\u7ec4 = [1,2,3] \uff0c\u4e2d\u4f4d\u6570 2 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1anums1 = [1,2], nums2 = [3,4] \u8f93\u51fa\uff1a2.50000 \u89e3\u91ca\uff1a\u5408\u5e76\u6570\u7ec4 = [1,2,3,4] \uff0c\u4e2d\u4f4d\u6570 (2 + 3) / 2 = 2.5 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1anums1 = [0,0], nums2 = [0,0] \u8f93\u51fa\uff1a0.00000 \u793a\u4f8b 4\uff1a 1 2 \u8f93\u5165\uff1anums1 = [], nums2 = [1] \u8f93\u51fa\uff1a1.00000 \u793a\u4f8b 5\uff1a 1 2 \u8f93\u5165\uff1anums1 = [2], nums2 = [] \u8f93\u51fa\uff1a2.00000 \u63d0\u793a\uff1a nums1.length == m nums2.length == n 0 <= m <= 1000 0 <= n <= 1000 1 <= m + n <= 2000 -106 <= nums1[i], nums2[i] <= 10^6 \u8fdb\u9636\uff1a \u4f60\u80fd\u8bbe\u8ba1\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log (m+n)) \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u5417\uff1f","title":"\u82f1\u6587\u9898\u76ee: Median of two sorted arrays"},{"location":"solutions/leetcode4%20%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0%5B%E5%9B%B0%E9%9A%BE%5D/#_1","text":"\u5148\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\uff0c\u7136\u540e\u6839\u636e\u6570\u7ec4\u957f\u5ea6\u7684\u5947\u5076\u6765\u53d6\u5230\u4e2d\u4f4d\u6570\u3002\u5982\u679c\u662f\u5076\u6570\u4e2a\uff0c\u5c31\u53d6\u4e2d\u95f4\u4e24\u4e2a\u7684\u5e73\u5747\u6570\uff1b\u5982\u679c\u662f\u5947\u6570\u4e2a\uff0c\u76f4\u63a5\u53d6\u6700\u4e2d\u95f4\u7684\u5373\u53ef\u3002 \u4e0e leetcode 88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4 \u7c7b\u4f3c\u3002","title":"\u601d\u8def"},{"location":"solutions/leetcode4%20%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0%5B%E5%9B%B0%E9%9A%BE%5D/#acc","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class Solution { public : double findMedianSortedArrays ( vector < int >& nums1 , vector < int >& nums2 ) { vector < int > nums ; double res ; int m = nums1 . size (); int n = nums2 . size (); int len ; int i = 0 , j = 0 ; while ( i < m && j < n ) // \u53ea\u8981\u4e00\u4e2a\u6307\u9488\u626b\u5230\u6570\u7ec4\u672b\u5c3e\uff0c\u5faa\u73af\u7ed3\u675f { if ( nums1 [ i ] <= nums2 [ j ]) { nums . push_back ( nums1 [ i ]); i ++ ; } else { nums . push_back ( nums2 [ j ]); j ++ ; } } while ( i < m ) // \u6570\u7ec4nums1\u6ca1\u8dd1\u5b8c\uff0cnums2\u5df2\u8dd1\u5b8c\u65f6 { nums . push_back ( nums1 [ i ]); i ++ ; } while ( j < n ) // \u6570\u7ec4nums2\u6ca1\u8dd1\u5b8c\uff0cnums1\u5df2\u8dd1\u5b8c\u65f6 { nums . push_back ( nums2 [ j ]); j ++ ; } len = nums . size (); if ( len % 2 == 0 ) { res = ( nums [ len / 2 ] + nums [ len / 2-1 ]) / 2.0 ; } else res = nums [ len / 2 ]; return res ; } };","title":"\u5df2AC\u7684C++\u4ee3\u7801:"},{"location":"solutions/tips/","text":"","title":"\u73a9\u8f6c\u529b\u6263Tips"}]}